import React, { useState } from 'react';

/**
 * A searchable and filterable table component to display vulnerability details.
 * @param {object} props The component props.
 * @param {Array<object>} props.vulnerabilities The array of vulnerability objects.
 * @param {function} props.onSelectVulnerability The function to call when a vulnerability row is clicked.
 * @returns {JSX.Element} The VulnerabilityTable component.
 */
const VulnerabilityTable = ({ vulnerabilities, onSelectVulnerability }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const [filterSeverity, setFilterSeverity] = useState('All');

    const filteredVulnerabilities = vulnerabilities.filter(vuln => {
        const matchesSearchTerm = vuln.name.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesSeverity = filterSeverity === 'All' || vuln.risk.toLowerCase() === filterSeverity.toLowerCase();
        return matchesSearchTerm && matchesSeverity;
    });

    const getRiskColor = (risk) => {
        switch (risk.toLowerCase()) {
            case 'high':
                return 'text-red-500 font-semibold';
            case 'medium':
                return 'text-orange-500 font-semibold';
            case 'low':
                return 'text-yellow-500 font-semibold';
            default:
                return 'text-blue-500 font-semibold';
        }
    };

    return (
        <div className="bg-white rounded-xl shadow-lg p-6 mt-8">
            <h3 className="text-2xl font-bold text-gray-800 mb-4">Vulnerability Details</h3>
            <div className="flex flex-col md:flex-row justify-between mb-4">
                {/* Search Bar */}
                <input
                    type="text"
                    placeholder="Search vulnerabilities..."
                    className="flex-grow border border-gray-300 rounded-md px-4 py-2 mb-2 md:mb-0 md:w-1/3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
                {/* Severity Filter */}
                <select
                    className="border border-gray-300 rounded-md px-4 py-2 md:w-1/3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={filterSeverity}
                    onChange={(e) => setFilterSeverity(e.target.value)}
                >
                    <option value="All">All Severities</option>
                    <option value="High">High</option>
                    <option value="Medium">Medium</option>
                    <option value="Low">Low</option>
                    <option value="Informational">Informational</option>
                </select>
            </div>

            <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                        <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Vulnerability Name
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Risk Level
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                URL
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Description
                            </th>
                        </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                        {filteredVulnerabilities.length > 0 ? (
                            filteredVulnerabilities.map((vuln, index) => (
                                <tr
                                    key={index}
                                    className="hover:bg-gray-100 cursor-pointer transition-colors"
                                    onClick={() => onSelectVulnerability(vuln)}
                                >
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{vuln.name}</td>
                                    <td className={`px-6 py-4 whitespace-nowrap text-sm ${getRiskColor(vuln.risk)}`}>{vuln.risk}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{vuln.url}</td>
                                    <td className="px-6 py-4 text-sm text-gray-500 max-w-xs overflow-hidden text-ellipsis whitespace-nowrap">
                                        {vuln.description}
                                    </td>
                                </tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="4" className="px-6 py-4 text-center text-gray-500">No vulnerabilities found or matching filters.</td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default VulnerabilityTable;
